<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ad.Text" xml:space="preserve">
    <value>広告欄</value>
  </data>
  <data name="add.Content" xml:space="preserve">
    <value>追加</value>
  </data>
  <data name="addlist.Text" xml:space="preserve">
    <value>リストに追加する</value>
  </data>
  <data name="adlis.Label" xml:space="preserve">
    <value>リストへ追加</value>
  </data>
  <data name="affinityresult1" xml:space="preserve">
    <value> </value>
  </data>
  <data name="affinityresult2" xml:space="preserve">
    <value>の相性の結果は</value>
  </data>
  <data name="and.Text" xml:space="preserve">
    <value>かつ</value>
  </data>
  <data name="as.Text" xml:space="preserve">
    <value>アプリのサイト</value>
  </data>
  <data name="ata" xml:space="preserve">
    <value>アプリの説明</value>
  </data>
  <data name="bu" xml:space="preserve">
    <value>むし</value>
  </data>
  <data name="can.Content" xml:space="preserve">
    <value>キャンセル</value>
  </data>
  <data name="check.Content" xml:space="preserve">
    <value>チェック</value>
  </data>
  <data name="checkresult" xml:space="preserve">
    <value>タイプ相性チェックの結果</value>
  </data>
  <data name="CompatibilityCheck" xml:space="preserve">
    <value>相性チェック</value>
  </data>
  <data name="da" xml:space="preserve">
    <value>あく</value>
  </data>
  <data name="Defence" xml:space="preserve">
    <value>守り側</value>
  </data>
  <data name="del.Content" xml:space="preserve">
    <value>削除</value>
  </data>
  <data name="delEx.Text" xml:space="preserve">
    <value>削除ボタンを押すとリストの中身が全て削除されます。</value>
  </data>
  <data name="dellist.Label" xml:space="preserve">
    <value>リストの削除</value>
  </data>
  <data name="dr" xml:space="preserve">
    <value>ドラゴン</value>
  </data>
  <data name="el" xml:space="preserve">
    <value>でんき</value>
  </data>
  <data name="fa" xml:space="preserve">
    <value>フェアリー</value>
  </data>
  <data name="fi" xml:space="preserve">
    <value>かくとう</value>
  </data>
  <data name="fir" xml:space="preserve">
    <value>ほのお</value>
  </data>
  <data name="fl" xml:space="preserve">
    <value>ひこう</value>
  </data>
  <data name="gh" xml:space="preserve">
    <value>ゴースト</value>
  </data>
  <data name="gra" xml:space="preserve">
    <value>くさ</value>
  </data>
  <data name="gro" xml:space="preserve">
    <value>じめん</value>
  </data>
  <data name="ic" xml:space="preserve">
    <value>こおり</value>
  </data>
  <data name="input.PlaceholderText" xml:space="preserve">
    <value>タイトルを入力してください</value>
  </data>
  <data name="item.Text" xml:space="preserve">
    <value>選んだ項目に対して</value>
  </data>
  <data name="MemoData" xml:space="preserve">
    <value>メモデータ</value>
  </data>
  <data name="no" xml:space="preserve">
    <value>ノーマル</value>
  </data>
  <data name="Offence" xml:space="preserve">
    <value>攻め側</value>
  </data>
  <data name="po" xml:space="preserve">
    <value>どく</value>
  </data>
  <data name="pp" xml:space="preserve">
    <value>プライバシー　ポリシー</value>
  </data>
  <data name="ps" xml:space="preserve">
    <value>エスパー</value>
  </data>
  <data name="rem.Text" xml:space="preserve">
    <value>リストの中身を削除する</value>
  </data>
  <data name="reset.Content" xml:space="preserve">
    <value>リセット</value>
  </data>
  <data name="Result.Text" xml:space="preserve">
    <value>結果：</value>
  </data>
  <data name="resultsend" xml:space="preserve">
    <value>相性をチェックした結果を送信します</value>
  </data>
  <data name="ro" xml:space="preserve">
    <value>いわ</value>
  </data>
  <data name="SavedList" xml:space="preserve">
    <value>保存リスト</value>
  </data>
  <data name="st" xml:space="preserve">
    <value>はがね</value>
  </data>
  <data name="tcc.Text" xml:space="preserve">
    <value>タイプ相性チェッカー for XY</value>
  </data>
  <data name="times" xml:space="preserve">
    <value>倍</value>
  </data>
  <data name="TypeAttack.Header" xml:space="preserve">
    <value>攻撃技のタイプ</value>
  </data>
  <data name="TypeDefence.Header" xml:space="preserve">
    <value>防御側のタイプ</value>
  </data>
  <data name="TypeOffence.Header" xml:space="preserve">
    <value>攻撃側のタイプ</value>
  </data>
  <data name="wa" xml:space="preserve">
    <value>みず</value>
  </data>
  <data name="_And" xml:space="preserve">
    <value>かつ</value>
  </data>
  <data name="ade" xml:space="preserve">
    <value>算出方法</value>
  </data>
  <data name="AppDete.Text" xml:space="preserve">
    <value>算出方法</value>
  </data>
  <data name="AppDetermination.Title" xml:space="preserve">
    <value>算出方法</value>
  </data>
  <data name="AppStatementBody.Text" xml:space="preserve">
    <value>相性チェックページでは、ボックスの中身を選択し、チェックするボタンを押すことで算出することができます。
”やけど状態”のボタンは物理技に限り使用してください。結果が2分の1になります。
攻撃側のタイプと攻撃技のタイプが一致した場合の補正もあります。通常の結果に1.5倍されます。
これらの補正が適応されない場合もあります。状況によって使い分けてください。</value>
  </data>
  <data name="burn.Content" xml:space="preserve">
    <value>やけど状態</value>
  </data>
  <data name="burn.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip" xml:space="preserve">
    <value>物理技の場合のみに使用してください。</value>
  </data>
</root>